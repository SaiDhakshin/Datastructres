#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    int height;
    struct node *left,*right;
};

int max(int a,int b){
    if(a>b){
        return a;
    }else{
        return b;
    }
}

struct node *newNode(int data){
    struct node *temp = (struct node*)malloc(sizeof(struct node));
    temp->data = data;
    temp->left=NULL;
    temp->right = NULL;
    temp->height = 0;
    
    return temp;
}

int height(struct node *Node){
    if(Node==NULL){
        return -1;
    }
    return Node->height;
}

int heightDiff(struct node *Node){
    if(Node==NULL){
        return -1;
    }
    return height(Node->left) - height(Node->right);
}

struct node *minNode(struct node *Node){
    if(Node==NULL){
        return Node;
    }
    while(Node->left!=NULL){
        Node = Node->left;
    }
    return Node;
}

void levelOrder(struct node *Node , int level){
    int i;
    if(Node!=NULL){
        levelOrder(Node->right,level+1);
        
        for(i=0;i<level;i++){
            printf("\t");
            printf("%d",Node->data);
        }
        
        levelOrder(Node->left,level+1);
    }
}

struct node *rightRotate(struct node *K1){
    struct node *K2 = K1->left;
    struct node *T = K2->right;
    K2->right = K1;
    K2->left = T;
    K1->height = max(height(K1->left),height(K2->right))+1;
    K2->height = max(height(K2->left),height(K2->right))+1;
    
    return K2;
}

struct node *leftRotate(struct node *K1){
    struct node *K2 = K1->right;
    struct node *T = K2->left;
    K2->left = K1;
    K2->right = T;
    K1->height = max(height(K1->left),height(K2->right))+1;
    K2->height = max(height(K2->left),height(K2->right))+1;
    
    return K2;
}

struct node *leftRightRotate(struct node *K1){
    K1->left = leftRotate(K1->left);
    
    return rightRotate(K1);
}

struct node *rightLeftRotate(struct node *K1){
   K1->right = rightRotate(K1->right);
    
    return leftRotate(K1);
}

struct node *insert(struct node *root,int data){
    if(root==NULL){
        return newNode(data);
    }
    if(data < root->data){
        root->left = insert(root->left,data);
    }
    else if(data > root->data){
        root->right = insert(root->right,data);
    }else{
        return root;
    }
    
    root->height = 1+max(height(root->left),height(root->right));
    int balance = heightDiff(root);
    
    if(balance > 1 && data < root->left->data){
        return rightRotate(root);
    }
    if(balance < -1 && data > root->right->data){
        return leftRotate(root);
    }
    
    if(balance > 1 && data > root->left->data){
        root = leftRightRotate(root);
    }
    if(balance < -1 && data < root->right->data){
        root = rightLeftRotate(root);
    }
    
    return root;
    
}

struct node *deleteNode(struct node *root,int data){
    if(root==NULL){
        return root;
    }
    if(data < root->data){
        root->left = deleteNode(root->left,data);
    }
    else if(data > root->data){
        root->right = deleteNode(root->right,data);
    }else{
        if((root->left==NULL)||(root->right==NULL)){
            struct node *temp  = root->left?root->left:root->right;
            
            if(temp==NULL){
                temp = root;
                root = NULL;
            }
            else{
                root = temp;
            }
            
            free(temp);
        }else{
            struct node *temp = minNode(root->right);
            root->data = temp->data;
            root->right = deleteNode(root->right,temp->data);
        }
    }
    
    if(root==NULL){
        return root;
    }
    root->height = 1+max(height(root->left),height(root->right));
    int balance = heightDiff(root);
    
    if(balance > 1 && heightDiff(root->left) >=0){
        return rightRotate(root);
    }
    if(balance < -1 && heightDiff(root->right) >0){
        root = leftRightRotate(root);
        return root;
    }
    if(balance < -1 && heightDiff(root->right) <0){
        return leftRotate(root);
    }
    if(balance < 1 && heightDiff(root->left) < 0){
        root=rightLeftRotate(root);
        return root;
    }
    return root;
}

void inorder(struct node *root){
    if(root!=NULL){
        inorder(root->left);
        printf(" %d ",root->data);
        inorder(root->right);
    }
}

void main(){
    struct node *root = NULL;
    root = insert(root,5);
    insert(root,7);
    insert(root,3);
    inorder(root);
    deleteNode(root,5);
    inorder(root);
}