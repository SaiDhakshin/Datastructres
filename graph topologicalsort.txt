#include <stdio.h>
#define MAX 50
int n,adj[MAX][MAX];
int front=-1,rear=-1,queue[MAX];

void create_graph(){
    int i,j;
    printf("Enter number of vertices:");
    scanf("%d",&n);
    printf("\nEnter adjacency matrix:");
    for(i=1;i<=n;i++){
        for(j=1;j<=n;j++){
            scanf("%d",&adj[i][j]);
        }
    }
    
}

int indegree(int node){
    int i,count=0;
    for(i=1;i<=n;i++){
        if(adj[i][node]==1){
            count++;
        }
    }
    return count;
}

void enqueue(int v){
    if(front==-1){
        front++;
    }
    rear++;
    queue[rear]=v;
}

int dequeue(){
    
    int i = queue[front];
    front++;
    return i;
}


void main(){
    int i,j=1,k;
    int topsort[MAX],indeg[MAX];
    create_graph();
    printf("\nThe adjacency matrix is:");
    for(i=1;i<=n;i++){
        indeg[i] = indegree(i);
        printf("\nIndegree[V%d] = %d",i,indeg[i]);
        if(indeg[i]==0){
            enqueue(i);
        }
    }
    while(front<=rear){
        k=dequeue();
        topsort[j++]=k;
        printf("\nThe topological sort %d",topsort[j-1]);
        for(i=1;i<=n;i++){
            if(adj[k][i]==1){
                adj[k][i]=0;
                indeg[i]=indeg[i]-1;
                if(indeg[i]==0){
                    enqueue(i);
                }
            }
        }
    }
    printf("\nNodes after sorting ");
    for(i=1;i<=n;i++){
        printf("V%d-",topsort[i]);
    }
}